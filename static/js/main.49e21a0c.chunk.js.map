{"version":3,"sources":["cachorroPolvo.jpg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","App","Component","render","React","createElement","Fragment","className","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,2C,gLCQ3C,MAAMC,UAAYC,YAChBC,SACE,OACEC,IAAAC,cAAAD,IAAAE,SAAA,KACAF,IAAAC,cAAA,OAAKE,UAAU,OACbH,IAAAC,cAAA,UAAQE,UAAU,cAChBH,IAAAC,cAAA,OAAKG,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,IAAAC,cAAA,MAAIE,UAAU,aAAY,4CAI/BH,IAAAC,cAAA,OAAKE,UAAU,OACdH,IAAAC,cAAA,UAAQE,UAAU,cAChBH,IAAAC,cAAA,OAAKG,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,IAAAC,cAAA,UAAI,YACFD,IAAAC,cAAA,OAAKE,UAAU,WAAWC,IAAI,uGAAuGE,IAAI,aAC3IN,IAAAC,cAAA,MAAIE,UAAU,aAAY,mDASnBN,QCvBf,MAAMU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAMC,IACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAAS/B,OAAOC,IAAAC,cAACJ,EAAG,MAAKkC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,cAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,KAC9B,MAAMtB,EAAK,GAAAuB,OAAMH,cAAsB,sBAElC3B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAKqB,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAKC,IACjCA,EAAa0B,aAAa3B,KAAK,KAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBc,MAAM,KACLF,QAAQC,IACN,mEAzDAoB,CAAwBjC,GAHxBD,EAAgBC,MC7BxBkC,K","file":"static/js/main.49e21a0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cachorroPolvo.dc9a8a98.jpg\";","import React, { Component } from 'react';\n\nimport logo from './cachorroPolvo.jpg';\n\n//import mba from './MBA.png';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">OctoCat é o KCT é nois Cachorro!</h1>\n        </header>\n      </div>\n\n     <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h3>Chapolin</h3>\n          <img className='chapolin' src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRHHgVLIIckBHJhuPy2q0RPmF5f2bz4EkRS3z0m0QxykA&s\" alt=\"Chapolin\"></img>\n        <h1 className=\"App-title\"> Não contavam com a minha astúcia :) </h1>\n      </header>\n    </div>\n</>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}